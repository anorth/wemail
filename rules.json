{
  "rules": {
    // User account information.
    "users": {
      "$uid": {
        // Read and write access for the owner of this user account, uid exactly matching the key ($uid)
        ".write": "auth.uid === $uid",
        ".read": "auth.uid === $uid",
        // List of pads shared with the user. This isn't directly used for access control.
        "pads": {
          "$pad_id": {
            // Allow pad owner to write (retract) their pad object for all collaborators.
            ".write": "root.child('pads').child($pad_id).child('owner').val() === auth.uid || root.child('pads').child($pad_id).child('owner').val() === null"
          }
        }
      }
    },
    // Shared drafts & chat
    "pads": {
      "$pad_id": {
        // Allow pad owner to delete the entire thing.
        ".write": "newData.val() === null && (data.child('owner').val() === auth.uid || data.child('owner').val() === null)",

        // Per-user state: name, cursor etc. Writable by that user.
        // A record here implies that the user is a collaborator.
        // FIXME(alex): Restrict write access to invited users
        "users": {
          ".read": "data.parent().child('users/'+auth.uid).exists()",
          "$uid": {
            ".write": "auth.uid === $uid" // user can write their own record
          }
        },

        // The pad owner's id, write-once by anyone. Readable by collaborators.
        "owner": {
          ".read":  "data.parent().child('users/'+auth.uid).exists()",
          ".write": "!data.exists() && newData.val() === auth.uid"
        },
        // Collaborators can read/write headers.
        "headers": {
          ".read":  "data.parent().child('users/'+auth.uid).exists()",
          ".write": "data.parent().child('users/'+auth.uid).exists()"
        },
        // Collaborators can invite others.
        "invited": {
          ".read":  "data.parent().child('users/'+auth.uid).exists()",
          ".write": "data.parent().child('users/'+auth.uid).exists()"
        },
        // Chat messages. Collaborators can read, write only if recording their own user id.
        "chat": {
          ".read": "data.parent().child('users/'+auth.uid).exists()",
          "$msg_id": {
            ".write": "data.parent().parent().child('users/'+auth.uid).exists() && auth.uid === newData.child('userId').val()"
          }
        },
        // History. Collaborators can read/write, but not overwrite/delete existing revisions.
        "history": {
          ".read": "data.parent().child('users/'+auth.uid).exists()",
          "$revision": {
            ".write": "data.parent().parent().child('users/'+auth.uid).exists() && !data.exists()"
          }
        },
        // Snapshots. Collaborators can read, write, only if they are author of revision being checkpointed.
        "checkpoint":  {
          ".read":  "data.parent().child('users/'+auth.uid).exists()",
          ".write": "data.parent().child('users/'+auth.uid).exists() && data.parent().child('history').child(newData.child('id').val()).child('a').val() === newData.child('a').val()",
          ".validate": "newData.hasChildren(['a', 'o', 'id'])"
        }
      }
    }
  }
}
